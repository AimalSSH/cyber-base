import socket
import re


def main():
    FTP_SERVER = "test.rebex.net"
    FTP_PORT = 21
    USERNAME = "demo"
    PASSWORD = "password"

    try:
        print(f"Подключается к {FTP_SERVER}:{FTP_PORT} ...")
        control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        control_socket.connect((FTP_SERVER, FTP_PORT))

        banner = control_socket.recv(1024).decode()
        print(f"Баннер сервера: {banner}")

        user_command = f"USER {USERNAME}\r\n"
        print(f"Отправляем: {user_command.strip()}")
        control_socket.send(user_command.encode())

        response = control_socket.recv(1024).decode()
        print(f"Ответ: {response}")

        if "331" not in response:
                print("Ошибка: сервер не запросил пароль")
                return
        
        pass_command = f"PASS {PASSWORD}\r\n"
        print(f"Отправляем: {pass_command.strip()}")
        control_socket.send(pass_command.encode())

        response = control_socket.recv(1024).decode()
        print(f"Ответ: {response}")

        if "230" not in response:
            print("Ошибка аутентификации")
            return
        
        pasv_command = "PASV\r\n"
        print(f"Отправляем: {pasv_command.strip()}")
        control_socket.send(pasv_command.encode())

        response = control_socket.recv(1024).decode()
        print(f"Ответ PASV: {response}")

        match = re.search(r'\((\d+),(\d+),(\d+),(\d+),(\d+),(\d+)\)', response)
        if not match:
            print("Не удалось распарсить PASV ответ")
            return
        
        ip_parts = match.groups()[:4]
        port_parts = match.groups()[4:6]

        data_ip = '.'.join(ip_parts)

        data_port = (int(port_parts[0]) * 256) + int(port_parts[1])

        print(f"Data connection: {data_ip}:{data_port}")
        print(f"Устанавливаем data-соединение...")
        
        data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        data_socket.connect((data_ip, data_port))

        list_command = "LIST\r\n"
        print(f"Отправляем: {list_command.strip()}")
        control_socket.send(list_command.encode())

        response = control_socket.recv(1024).decode()
        print(f"Ответ на LIST: {response}")
        print("Получаем данные листинга...")
        
        listing_data = b""
        while True:
            chunk = data_socket.recv(4096)
            if not chunk:
                break
            listing_data += chunk
        
        print("Содержимое директории:")
        print(listing_data.decode())

        response = control_socket.recv(1024).decode()
        print(f"Финальный ответ: {response}")

        print("Закрываем соединения...")
        quit_command = "QUIT\r\n"
        control_socket.send(quit_command.encode())

        response = control_socket.recv(1024).decode()
        print(f"Ответ на QUIT: {response}")

    except Exception as e:
        print(f"Ошибка: {e}")

    finally:
        if 'data_socket' in locals():
            data_socket.close()
        if 'control_socket' in locals():
            control_socket.close()
        print("Соединения закрыты")

if __name__ == "__main__":
    main()